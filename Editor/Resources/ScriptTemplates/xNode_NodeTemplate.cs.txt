using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;
using XNode;
using XNodeEditor;
using System.Linq;
using System.Text.RegularExpressions;

[NodeTint("#ffffff")]
[CreateNodeMenu("MyMenu/#SCRIPTNAME#")]
public class #SCRIPTNAME# : Node 
{
    [Range(0, 1)] public float fac = 1;
    public Color color = Color.white;

	[Input] public string sFac;
    [Input] public string sVector;
    [Input] public string sColor;

    [Output] public string Result;

	public override object GetValue(NodePort port)
    {
        string sFac = GetInputValue<string>("sFac", fac.ToString()).Split('?').Last();
        string sColor = GetInputValue<string>("sColor", this.sColor).Split('?').Last();
        string sVector = GetInputValue<string>("sVector", "_POS").Split('?').Last();

        string sFac_f = GetInputValue<string>("sFac", "").Split('?').First();
        string sColor_f = GetInputValue<string>("sColor", "").Split('?').First();
        string sVector_f = GetInputValue<string>("sVector", "").Split('?').First();

        this.sVector = string.Format("float3({0}, {1}, {2})", 0, 0, 0);
        this.sColor = string.Format("float4({0}, {1}, {2}, {3})", color.r, color.g, color.b, color.a);

        string ValueID = "_" + Regex.Replace(name, @"[^a-zA-Z0-9]", "") + "_" + Mathf.Abs(GetInstanceID()).ToString();

        if (port.fieldName == "Result")
        {
            return sFac_f + sColor_f + sVector_f +
                "|float " + ValueID + "; " +
                "yourCode" + ";?" + ValueID;
        }
        else
            return 0f;
    }

    public override void OnCreateConnection(NodePort from, NodePort to)
    {
        base.OnCreateConnection(from, to);
        if (from.node == to.node)
        {
            from.Disconnect(to);
        }
    }
}


[CustomNodeEditor(typeof(#SCRIPTNAME#))]
public class #SCRIPTNAME#Editor : NodeEditor
{
    #SCRIPTNAME# serializedNode;
    public override void OnBodyGUI()
    {
        if (serializedNode == null) serializedNode = target as #SCRIPTNAME#;
        serializedObject.Update();
        serializedNode.GetPort("Result").nodePortType = "float";
        NodeEditorGUILayout.PropertyField(serializedObject.FindProperty("Result"), new GUIContent("Result", ""));
        GUILayout.Space(10);
        NodeEditorGUILayout.PortField(new GUIContent("Vector"), serializedNode.GetInputPort("sVector"));
        serializedNode.GetInputPort("sVector").connectionType = Node.ConnectionType.Override;
        serializedNode.GetInputPort("sVector").nodePortType = "vector3";

        SetPortBehaviour("fac", "sFac", "Fac");
        SetPortBehaviour("color", "sColor", "Color", "vector4");
        serializedObject.ApplyModifiedProperties();
    }

    void SetPortBehaviour(string propertyNamer, string portNamer, string guiNamer, string portType = "float")
    {
        string fieldName;
        if (serializedNode == null) serializedNode = target as #SCRIPTNAME#;
        serializedNode.GetInputPort(portNamer).connectionType = Node.ConnectionType.Override;
        serializedNode.GetInputPort(portNamer).nodePortType = portType;
        if (serializedNode.GetPort(portNamer).IsConnected)
            fieldName = "";
        else
            fieldName = "Input value used for unconnected sockets.";
        NodeEditorGUILayout.PropertyField(serializedObject.FindProperty(propertyNamer), new GUIContent(guiNamer, fieldName), serializedNode.GetInputPort(portNamer));
    }
 }